matches:
  # try
  - trigger: ":fixy"
    replace: "找出这段代码中的错误。解释根本原因并提供修正后的代码。"
  - trigger: ":alts"
    replace: "实现/解决这个问题有哪 3 种替代方法？简要比较它们。"
  - trigger: ":core"
    replace: "用简单、直接的语言解释这背后绝对核心的概念/机制。不要废话。"
  - trigger: ":why"
    replace: "为什么当初要这样设计/实现？可能考虑了哪些权衡？"

  # meta
  - trigger: ":ai"
    replace: |
      你上次回答的结构很好。下次我应该怎么提示你，才能得到类似结构的答案？请给我具体的指令示例。
  - trigger: ":ai"
    replace: |
      将我们讨论中的关键信息浓缩成一个全面而简洁的教程格式，适合给另一个高级 LLM 看。侧重于核心概念和技术细节。
  - trigger: ":more"
    replace: "有什么更简单的方案吗？列出 8 个。"
  - trigger: ":py"
    replace: "先编写 Python 代码来测试概念/逻辑。只有在 Python 测试通过后 *才* 提供 JavaScript 代码。" 
  - trigger: ":story"
    replace: "用讲故事的方式告诉我。"
  - trigger: ":bullet"
    replace: "用要点（bullet points）列出来。"
  - trigger: ":pol"
    replace: |
      润色以下文本：
      1. 修复语法错误和别扭/不地道的表达。
      2. 使用简单、直接的语言（倾向于日耳曼语系词汇）。
      3. 除了修正外，尽量减少改动（保持原文大小写、语言不变）。
      4. 提供润色后的版本。
      5. 然后，提供*另一种*语言（英/中）的润色版本。
      待润色的文本如下：
      
  - trigger: ":sum"
    replace: |
      目标： 对紧随本指令之后的文本进行深度技术剖析。
      指令：
      1.  分析以下文本：
      2.  提取核心要素：
          * 技术洞见： 最关键的技术概念、机制或发现。
          * 新颖论点： 文本中提出的独特、非传统的观点或主张。
          * 非显见结论： 推导出的、不直接陈述但有重要意义的结论。
          * 关键批判/权衡： 对技术、方法或结论的根本性限制、挑战或负面评价。
      3.  过滤标准：
          * 严格剔除： 营销术语、通用陈述、背景闲聊、重复信息、行业标准做法的简单描述（除非其应用方式特殊）。
          * 聚焦： 高信息密度、具体的技术细节、量化数据（如果存在）、有争议或反直觉的观点。
      4.  识别关键点：
          * 技术难点/突破： 指出文本中暗示或明确提到的核心技术障碍或创新性解决方案。
          * 潜在“虚言”(Bullshit Detection)： 识别任何看似夸大、缺乏证据支持、或与已知技术原理/实践相悖的主张。
      5.  输出要求：
          * 格式： 简洁的要点（bullet points）列表。
          * 风格： 直接、精炼、高度技术化、零“水分”。优先展示具有原创性、影响力或挑战性的内容。
      核心思维： 假设你是一名资深工程师或研究员，任务是快速评估这份材料的真正技术价值和新颖性，忽略所有非实质性内容。
  - trigger: ":zh"
    replace: "翻译成中文。"
  - trigger: ":getart"
    replace: |
      使用专业术语分析以下艺术作品的风格。
      1. 对主要可分析的组成部分进行分类（例如：构图、色彩、线条、媒介、渲染、影响等）。
      2. 对每个组成部分，使用特定的艺术术语精确描述所使用的技法/选择。
      目标：为另一位艺术家创建一份清晰的蓝图，以便复制这种风格。
      艺术作品的背景/描述如下：
  - trigger: ":icon"
    replace: "为以下内容生成一个 3D Fluent Emoji 风格的 iOS 应用图标："
  - trigger: ":dalle"
    replace: "为之前的请求生成图片，每次 DALL-E 调用生成一张，按顺序进行。本轮最多 6 张图片。现在开始生成第一张。" 
  - trigger: ":ocr"
    replace: "这是原始 OCR 文本。修正常见的错误（字符识别、空格、换行）并将其格式化为连贯的文本。" 
  - trigger: ":short"
    replace: "使以下文本简洁有力（遵循 Strunk & White：“省略不必要的词”）。确保每个词都有意义。去除冗余但保留基本含义。" 

  # note
  - trigger: ":word"
    replace: |
      `{{clipboard}}`
      解释这个词/短语通常如何使用。提供语境、细微差别和例句。
      
  - trigger: ":note"
    replace: |
      将以下学习要点完善并结构化为笔记。
      格式要求：常用技术术语使用英文。不常用/复杂的术语使用中文（英文）。
      输入内容如下：
      
  - trigger: ":note"
    replace: "将前面文本的关键点总结成简洁的笔记，以便快速回顾。"

  # blog
  - trigger: ":blog"
    replace: "写一篇博客文章解释 [主题/概念]。创建你自己的简单示例代码（不要使用我的具体代码）。侧重于清晰度和实际应用。主题：" 
  - trigger: ":blog"
    replace: "改进之前的博客文章：增加一些幽默感和相关的最佳实践技巧。" 
  - trigger: ":blog"
    replace: "为这篇博客文章创建一张图片：日式平面设计风格，以亮色为主色调。" 

  # code
  - trigger: ":comment"
    replace: "为以下代码添加简洁的英文注释，解释逻辑块（像副标题一样）。避免无关紧要的注释。提供带有完整注释的代码。" 
  - trigger: ":zip"
    replace: "生成一个 Python 脚本，该脚本创建所有讨论过的项目文件并将它们打包成 zip 压缩文件。提供该脚本或获取 zip 文件的方法。" 
  - trigger: ":compare"
    replace: "比较讨论过的几种方法：优缺点？是否符合最佳实践？有哪些知名项目/公司在使用每种方法？" 
  - trigger: ":full_code"
    replace: "提供在我们讨论中*仅被修改过的文件*的完整更新后代码。对于未修改的文件，说明“无更改”。包含所有原始注释，不要省略。" 
  - trigger: ":uiux" 
    replace: "根据上下文，提出 3 种不同的 UI/UX 设计方案。解释每种方案的理由。" 
  - trigger: ":code_apply" 
    replace: "展示必要的代码修改以及应用这些修改的步骤。" 
  - trigger: ":mindiff"
    replace: "应用所请求的代码更改，优先考虑最小化 diff 范围。仅修改必要的行/块。" 
  - trigger: ":console"
    replace: "将代码片段转换为可以直接在浏览器控制台中运行（如果存在，移除类型和模块语法）。" 
  - trigger: ":log"
    replace: "在代码中添加 `console.log` 语句以跟踪执行/调试。重点关注关键变量或函数入口/出口。" 
  - trigger: ":exp"
    replace: |
      像对完全的初学者一样解释以下代码（ELI5 风格）。
      在代码*内部*添加详细的中文注释（大量使用多行注释）。解释每个部分的“是什么”、“为什么”、“怎么做”。包括背景概念、类比、示例。要详尽、啰嗦。
      代码如下：
      
  - trigger: ":gitdiff"
    replace: "对于之前讨论的每个优化点（例如，在表格中），使用 git diff 格式提供代码更改。" 
  - trigger: ":eg"
    replace: "提供一个简单的、可运行的代码示例（无外部依赖），展示 [概念/代码] 的效果。展示“之前”和“之后”的版本，以清晰说明其目的/影响。" 

  # format
  - trigger: ":step"
    replace: "请使用嵌套步骤（例如，步骤 1, 1.1, 1.2...）来组织你的回答。" 
  - trigger: ":table"
    replace: "将信息整理成表格。使用相关的表情符号（emoji）。" 
  - trigger: ":article"
    replace: "将前面的文本重新格式化为结构良好、易于阅读的文章。*不要*总结或省略信息；只专注于改善流程和呈现方式。" 
  - trigger: ":thread" 
    replace: "用中立、客观、直接的语言重写文本。平实地陈述论点。避免绝对化、修辞手法（例如，引导性的冒号、“讽刺的是”、“教会了我们”）、对话式/观点化的措辞。坚持事实和逻辑。" 

