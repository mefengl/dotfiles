matches:
  - trigger: ":try"
    replace: |
      try

  - trigger: ":&&"
    replace: "Use the && operator to replace the ternary operator"
  - trigger: ":cn"
    replace: |
      import { type ClassValue, clsx } from "clsx"
      import { twMerge } from "tailwind-merge"
      function cn(...inputs: ClassValue[]) {
        return twMerge(clsx(inputs))
      }
  - trigger: ":useClickOutside"
    replace: |
      function useClickOutside(ref: React.RefObject<HTMLElement>, callback: Function) {
        useEffect(() => {
          const handleClickOutside = (event: MouseEvent) => {
            if (ref.current && !ref.current.contains(event.target as Node))
              callback()
          }
          document.addEventListener('mousedown', handleClickOutside)
          return () => {
            document.removeEventListener('mousedown', handleClickOutside)
          }
        }, [ref, callback])
      }
  - trigger: ":useLocation"
    replace: |
      function useLocation() {
        const [location, setLocation] = useState({ ...window.location })
        useEffect(() => {
          const checkLocation = () => {
            if (window.location.href !== location.href) {
              setLocation({ ...window.location })
            }
          }
          const intervalId = setInterval(checkLocation, 500)
          return () => clearInterval(intervalId)
        }, [location])
        return location
      }
  - trigger: ":useStorage"
    replace: |
      function useStorage<T>(key: string) {
        const [value, setValue] = useState<T | null>(null)
        useEffect(() => {
          const fetchStorageValue = async () => {
            const storedvalue = await storage.getItem<T | null>(key)
            setValue(storedvalue)
          }
          fetchStorageValue()
          const unwatch = storage.watch<T>(key, setValue)
          return unwatch
        }, [key])
        return value
      }
