matches:
  - trigger: ":try"
    replace: |
      try

  - trigger: ":&&"
    replace: "Use the && operator to replace the ternary operator"
  - trigger: ":cn"
    replace: |
      import { type ClassValue, clsx } from "clsx"
      import { twMerge } from "tailwind-merge"
      function cn(...inputs: ClassValue[]) {
        return twMerge(clsx(inputs))
      }
  - trigger: ":useClickOutside"
    replace: |
      function useClickOutside(ref: React.RefObject<HTMLElement>, callback: Function) {
        useEffect(() => {
          const handleClickOutside = (event: MouseEvent) => {
            if (ref.current && !ref.current.contains(event.target as Node))
              callback()
          }
          document.addEventListener('mousedown', handleClickOutside)
          return () => {
            document.removeEventListener('mousedown', handleClickOutside)
          }
        }, [ref, callback])
      }
  - trigger: ":useLocation"
    replace: |
      function useLocation() {
        const [location, setLocation] = useState({ ...window.location })
        useEffect(() => {
          const checkLocation = () => {
            if (window.location.href !== location.href) {
              setLocation({ ...window.location })
            }
          }
          const intervalId = setInterval(checkLocation, 500)
          return () => clearInterval(intervalId)
        }, [location])
        return location
      }
  - trigger: ":useStorage"
    replace: |
      function useStorage<T>(key: string) {
        const [value, setValue] = useState<T | null>(null)
        useEffect(() => {
          const fetchStorageValue = async () => {
            const storedvalue = await storage.getItem<T | null>(key)
            setValue(storedvalue)
          }
          fetchStorageValue()
          const unwatch = storage.watch<T>(key, setValue)
          return unwatch
        }, [key])
        return value
      }
  - trigger: ":throttle"
    replace: |
      /* only run once during the period
       * run at the end of the period
       */
      function throttle(fn, delay) {
        let last = 0
        return (...args) => {
          const now = Date.now()
          if (now - last < delay)
            return
          last = now
          return fn(...args)
        }
      }
  - trigger: ":debounce"
    replace: |
      /* only run once during the period
       * next run will only happen
       * when no new call is made for the period
       */
      function debounce(fn, delay) {
        let timeout
        return (...args) => {
          clearTimeout(timeout)
          timeout = setTimeout(() => fn(...args), delay)
        }
      }
  - trigger: ":useQuery"
    replace: |
      function useQuery(url) {
        const [data, setData] = useState(null)
        const [isLoading, setIsLoading] = useState(true)
        const [error, setError] = useState(null)
        useEffect(() => {
          const fetchData = async () => {
            try {
              const res = await fetch(url)
              if (!res.ok)
                throw new Error('A network error occurred.')
              const json = await res.json()
              setData(json)
            }
            catch (e) {
              setError(e.message)
            }
            finally {
              setIsLoading(false)
            }
          }
          fetchData()
        }, [url])
        return { data, isLoading, error }
      }
  - trigger: ":useActiveTabUrl"
    replace: |
      function useActiveTabUrl(): string {
        const [url, setUrl] = useState<string>('')
        useEffect(() => {
          const getActiveTabUrl = async () => {
            const [tab] = await browser.tabs.query({ active: true, currentWindow: true })
            if (tab?.url) {
              let formattedUrl = tab.url
              if (formattedUrl.endsWith('/')) {
                formattedUrl = formattedUrl.slice(0, -1)
              }
              setUrl(formattedUrl)
            }
          }
          getActiveTabUrl()
        }, [])
        return url
      }

