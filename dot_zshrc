# zmodload zsh/zprof
#2 try

function ni() {
  command ni "$@"
  echo "nun ${@:1}" >> $HISTFILE
  fc -R $HISTFILE
}
function nun() {
  command nun "$@"
  echo "ni ${@:1}" >> $HISTFILE
  fc -R $HISTFILE
}
function brew() {
  if [[ $1 == 'install' ]]; then
    command brew "$@"
    echo "brew uninstall ${@:2}" >> $HISTFILE
    fc -R $HISTFILE
  elif [[ $1 == 'uninstall' ]]; then
    command brew "$@"
    echo "brew install ${@:2}" >> $HISTFILE
    fc -R $HISTFILE
  else
    command brew "$@"
  fi
}

alias gnb='bash ~/config/git-next-branch.sh'
alias gnbo='gfo && gnb'

# zinit
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit light starship/starship

zinit wait lucid atload"_zsh_autosuggest_start" for zsh-users/zsh-autosuggestions
zinit wait lucid for zsh-users/zsh-syntax-highlighting
zinit wait lucid for zsh-users/zsh-history-substring-search

# scala
zinit wait lucid for OMZP::sbt
zinit wait lucid for OMZP::pip
zinit wait lucid for OMZP::git-prompt
zinit wait lucid for OMZP::gitignore
zinit wait lucid for OMZP::command-not-found
zinit wait lucid for OMZP::tmux
zinit wait lucid for OMZP::terraform

# alias & fast operation
zinit wait lucid for OMZP::aliases
zinit wait lucid for MichaelAquilina/zsh-you-should-use
zinit wait lucid for OMZP::git
zinit wait lucid for OMZP::git-auto-fetch
zinit wait lucid for OMZP::brew
zinit wait lucid for OMZP::vscode
zinit wait lucid for OMZP::autojump

# env
zinit wait lucid for OMZP::pyenv
zinit wait lucid for OMZP::rbenv

zinit for \
    atload"zicompinit; zicdreplay" \
    blockf \
    lucid \
    wait \
  zsh-users/zsh-completions

#2 try

# pnpm
export PNPM_HOME="$HOME/.pnpm-global/bin"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# docker
alias dockerup='docker-compose build & docker-compose up -d'
alias dockerclean='docker stop $(docker ps -aq) && docker rm $(docker ps -aq)'
alias awsdocker='aws ecr get-login-password --region $aws_region | docker login --username AWS --password-stdin $aws_prefix'

#1.2 better for daily
alias \$=''
alias rm='trash'
alias ss='exec zsh'
alias q='exit'
github_clone(){gh repo list mefengl | awk '{print $1}' | xargs -L1 gh repo clone 2>/dev/null}
github_update(){echo -e "\033[32mgithub_update:\033[0m";cd ~/GitHub;github_clone;for i in *;do cd $i;git pull;cd ~;done}
alias update='tldr --update; zplug update'

##1.2 too see
alias fast-dl='aria2c -x 16 -s 16 -j 16 -k 1M -c -d ~/Downloads'
alias fast-yt-dlp='yt-dlp --external-downloader aria2c --external-downloader-args "-x16 -s16 -k2M"'
alias gettxt='cat *.txt'
getfile(){pandoc $1 --to plain}
epub2txt() { for file in *.epub; do pandoc "$file" --to plain -o "${file%.epub}.txt"; done; }
geturls() {
    timestamp=$(date +%Y%m%d%H%M%S)
    mkdir -p ~/Downloads/articles/$timestamp
    node ~/projects/get-articles/index.js $1
}
splittxt() {
    mkdir -p ~/Downloads/txts
    cat *.txt | split -b 180k -d -a 2 - ~/Downloads/txts/
}
copynext() {
    for f in *; do 
        [[ $f != *_sent ]] || continue
        cat $f | pbcopy
        echo -e "\033[0;32mCopied $f\033[0m"
        mv $f ${f}_sent
        break
    done
}

# starship
alias vimstar='nvim ~/.config/starship.toml'

# github
alias ghr='gh repo'
alias ghc='gh repo clone'
alias ghcm='bash ~/config/ghclone.sh'
## repo
ghrc() {
  if [ $# -eq 1 ]; then
    gh repo create $1 --public --add-readme --gitignore Node --license MIT -c
  else
    echo "Usage: ghrc <repository_name>"
  fi
}
alias ghrd='ghpew repos'
alias ghrv='gh repo view --web'
## gist
ghgc() {
  echo "Press ^D on a new line to finish."
  if [ -z "$1" ]; then
    gh gist create --public -
  else
    gh gist create --public -f "$1" -
  fi
}
alias ghgd='gh gist delete'
alias ghge='GIT_EDITOR=vim gh gist edit'
alias ghgv='gh gist view'
alias ghgl='gh gist list'
## else
alias ghprv='gh pr view --web'
alias ghfv='git-file-history'
create_issue() {
  gh issue create --title="$1" --body="$2"
}

## ?? git? gh?
eval "$(github-copilot-cli alias -- "$0")"

# git
alias gdaily='git commit -am "daily: $(date +%m/%d)" && git push'

# node
alias npmb='bash ~/.config/ppm.sh'
alias vimn='nvim ~/.config/ppm.sh'
alias coden='code ~/.config/ppm.sh'
by-what() {
    madge --image ~/Downloads/graph.svg $1 && open ~/Downloads/graph.svg
}

# python
alias pipb='bash ~/.config/pipm.sh'
alias vimp='nvim ~/.config/pipm.sh'
alias codep='code ~/.config/pipm.sh'
## changeset
alias ncs='npx changeset'
alias ncsv='npx changeset version'

# homebrew
alias brewb='brew bundle --file=~/.config/homebrew/Brewfile'
alias vimb='nvim ~/.config/homebrew/Brewfile'
alias codeb='code ~/.config/homebrew/Brewfile'

# ruby
alias gemb='~/.rbenv/shims/bundle install --gemfile=~/.config/ruby/Gemfile && rm ~/.config/ruby/Gemfile.lock'
alias vimg='nvim ~/.config/ruby/Gemfile'
alias codeg='code ~/.config/ruby/Gemfile'

# nvim
alias vim='nvim'
alias vimz='nvim ~/.zshrc'
alias codez='code ~/.zshrc'
alias vimt='nvim ~/.tmux.conf'
# vscode
alias codek='code ~/.config/karabiner/karabiner.json'
alias codeb='code ~/.config/homebrew/Brewfile'
alias codei='nr test && vsce package && code --force --install-extension $(ls -t *.vsix | head -n 1) && rm -f *.vsix && echo "\033[0;32m\nPlease reload your terminal window to let the extension take effect.\033[0m"'
alias codeif='yes | vsce package && code --force --install-extension $(ls -t *.vsix | head -n 1) && rm -f *.vsix && echo "\033[0;32m\nPlease reload your terminal window to let the extension take effect.\033[0m"'

# chezmoi
export LANG=en_US.UTF-8
alias che="chezmoi re-add"
alias cheu="chezmoi update"
alias chea="chezmoi add"
alias checd="chezmoi cd"
alias cherm="chezmoi remove"

# git
alias gpp='ga .;gcmsg "zz";gp'
alias gdd='previous_branch=$(current_branch) && git checkout $(git_main_branch) && git pull && git branch -d $previous_branch'

# development
touch ~/development.sh
source ~/development.sh

## yabai&skhd
alias vimy='nvim ~/.config/yabai/yabairc'
alias vims='nvim ~/.config/skhd/skhdrc'

## espanso
alias vime='nvim ~/Library/Application\ Support/espanso/match/base.yml'
alias cde='cd ~/Library/Application\ Support/espanso/'

## atuin
alias vima='nvim ~/.config/atuin/config.toml'

autoload -Uz compinit
zstyle ':completion:*' menu select
fpath+=~/.zfunc
eval "$(atuin init zsh)"
